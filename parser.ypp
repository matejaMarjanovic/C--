%{

    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <vector>
    #include "expression.hpp"
    #include "statements.hpp"
    #include "function.hpp"
    using namespace std;

    extern void yyerror(const string &msg);
    int yylex();

%}

%union {
    int i;
    double d;
    string* s;
    ExprAST* e;
    StatAST* st;
    vector<StatAST*>* vecSt;
    vector<pair<Types, string>>* vecParams;
    vector<AssignementStatAST*>* vecAsg;
    BlockStatAST* b;
    Types t;
    PrototypeAST* proto;
    FunctionAST* func;
}

%token intTypeToken doubleTypeToken returnToken ifToken elseToken
%token gteqToken lteqToken eqToken neqToken
%token <s> idToken mainToken
%token <i> intToken
%token <d> doubleToken


%left ';'
%left ','
%left elseToken
%right '='
%left eqToken neqToken
%left '>' '<' lteqToken gteqToken 
%left '+' '-'
%left '*' '/'

%type <e> expression
%type <b> block
%type <vecSt> statements
%type <vecAsg> listVars
%type <st> statement declaration
%type <t> type
%type <vecParams> funcParameters
%type <proto> funcPrototype
%type <func> customFunction mainFunction

%%

program
    : mainFunction {
        $1->codegen();
        delete $1;
    }
    | customFunction {
        $1->codegen();
        delete $1;
    }
    | funcPrototype {
        $1->codegen();
        delete $1;
    }
    ;

mainFunction
    : type mainToken '(' funcParameters ')' block {
        $$ = new FunctionAST(PrototypeAST(*$2, *$4, $1), $6);
        delete $2;
        delete $4;
    }
    | type mainToken '(' ')' block {
        $$ = new FunctionAST(PrototypeAST(*$2, vector<pair<Types, string>>(), $1), $5);
        delete $2;
    }
    ;

customFunction
    : type idToken '(' funcParameters ')' block {
        $$ = new FunctionAST(PrototypeAST(*$2, *$4, $1), $6);
        delete $2;
        delete $4;
    }
    | type idToken '(' ')' block {
        $$ = new FunctionAST(PrototypeAST(*$2, vector<pair<Types, string>>(), $1), $5);
        delete $2;
    }
    ;
    
funcPrototype
    : type idToken '(' funcParameters ')' ';'{
        $$ = new PrototypeAST(*$2, *$4, $1);
        delete $2;
        delete $4;
    }
    | type idToken '(' ')' ';' {
        $$ = new PrototypeAST(*$2, vector<pair<Types, string>>(), $1);
        delete $2;
    }
    ;
    
type
    : intTypeToken {
        $$ = Int;
    }
    | doubleTypeToken {
        $$ = Double;
    }
    ;
    
funcParameters
    : funcParameters ',' type idToken {
        $$ = $1;
        $$->push_back(pair<Types, string>($3, *$4));
        delete $4;
    }
    | type idToken {
        $$ = new vector<pair<Types, string>>();
        $$->push_back(pair<Types, string>($1, *$2));
        delete $2;
    }
    ;

block
    : '{' statements '}' {
        $$ = new BlockStatAST(*$2);
        delete $2;
    }
    ;
    
statements
    : statements statement {
        $$ = $1;
        $$->push_back($2);
    }
    | {
        $$ = new vector<StatAST*>();
    }
    ;
    
statement
    : declaration ';' {
        $$ = $1;
    }
    | listVars ';' {
        $$ = new ListVarsStatAST(*$1);
        delete $1;
    }
    | expression ';' {
        $$ = new ExpressionStatAST($1);
    }
    | returnToken expression ';' {
        $$ = new ReturnStatAST($2);
    }
    | ifToken '(' expression ')' block {
        $$ = new IfElseStatAST($3, $5, nullptr);
    }
    | ifToken '(' expression ')' block elseToken block {
        $$ = new IfElseStatAST($3, $5, $7);
    }
    ;

declaration
    : type listVars {
        $$ = new DeclarationStatAST($1, *$2);
        delete $2;
    }
    ;
    
listVars
    : listVars ',' idToken {
        $$ = $1;
        auto e = new AssignementStatAST(*$3, nullptr);
        $$->push_back(e);
        delete $3;
    }
    | listVars ',' idToken '=' expression {
        $$ = $1;
        auto e = new AssignementStatAST(*$3, $5);
        $$->push_back(e);
        delete $3;
    }
    /*| idToken {
        $$ = new vector<AssignementStatAST*>();
        auto e = new AssignementStatAST(*$1, nullptr);
        $$->push_back(e);
        delete $1;
    }*/
    | idToken '=' expression {
        $$ = new vector<AssignementStatAST*>();
        auto e = new AssignementStatAST(*$1, $3);
        $$->push_back(e);
        delete $1;
    }
    ;
    
expression
    : expression '+' expression {
        $$ = new BinOpExprAST($1, $3, Plus);
    }
    | expression '-' expression {
        $$ = new BinOpExprAST($1, $3, Minus);
    }
    | expression '*' expression {
        $$ = new BinOpExprAST($1, $3, Asterisk);
    }
    | expression '/' expression {
        $$ = new BinOpExprAST($1, $3, Slash);
    }
    | expression '>' expression {
        $$ = new BinOpExprAST($1, $3, Greater);
    }
    | expression '<' expression {
        $$ = new BinOpExprAST($1, $3, Less);
    }
    | expression gteqToken expression {
        $$ = new BinOpExprAST($1, $3, GreaterEq);
    }
    | expression lteqToken expression {
        $$ = new BinOpExprAST($1, $3, LessEq);
    }
    | expression eqToken expression {
        $$ = new BinOpExprAST($1, $3, Equal);
    }
    | expression neqToken expression {
        $$ = new BinOpExprAST($1, $3, NotEqual);
    }
    | idToken '(' funcCallArgs ')' {
/*         $$ = FuncCallExprAST($*1, $3); */
        delete $1;
    }
    | idToken {
        $$ = new VariableExprAST(*$1);
        delete $1;
    }
    | intToken {
        $$ = new NumericExprAST($1, Int);
    }
    | doubleToken {
        $$ = new NumericExprAST($1, Double);
    }
    ;
    
funcCallArgs
    : funcCallArgs ',' expression {
    
    }
    | expression {
    
    }
    | {
    
    }
    ;
    
%%

extern LLVMContext TheContext;
extern Module* TheModule;

int main(int argc, char** argv) {
    initializeModuleAndPassManager();
    yyparse();
    TheModule->dump();
    delete TheModule;
    return 0;
}
